name: FusionOne Metrics

on:
  release:
    types: [published]

jobs:
  post-metrics:
    runs-on: ubuntu-latest
    steps:
      - name: Detect Checkmarx Type
        id: detect-type
        uses: actions/github-script@v6
        with:
          script: |
            // Check if CheckmarxOne secrets are available
            const hasCxOneSecrets = !!process.env.CXONE_API_HOST && !!process.env.CXONE_API_KEY && !!process.env.CXONE_TENANT;
            const hasCxSecrets = !!process.env.CX_API_HOST && !!process.env.CX_USER_NAME && !!process.env.CX_PASSWORD;

            if (hasCxOneSecrets) {
              console.log('Using CheckmarxOne authentication');
              return 'cxone';
            } else if (hasCxSecrets) {
              console.log('Using Checkmarx authentication');
              return 'cx';
            } else {
              core.setFailed('Missing required Checkmarx credentials');
              return 'none';
            }
          result-encoding: string
        env:
          CXONE_API_HOST: ${{ secrets.CXONE_API_HOST }}
          CXONE_API_KEY: ${{ secrets.CXONE_API_KEY }}
          CXONE_TENANT: ${{ secrets.CXONE_TENANT }}
          CX_API_HOST: ${{ secrets.CX_API_HOST }}
          CX_USER_NAME: ${{ secrets.CX_USER_NAME }}
          CX_PASSWORD: ${{ secrets.CX_PASSWORD }}

      # Step to dynamically get the installation ID for the "FusionOne Platform" app
      - name: Get FusionOne Platform Installation ID
        id: get_installation_id
        uses: actions/github-script@v6
        with:
          script: |
            const app_slug = "fusionone-platform";
            let installationId = "";

            try {
              const installations = await github.rest.apps.listInstallationsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });

              const appInstallation = installations.data.find(
                (i) => i.app_slug === app_slug
              );

              if (appInstallation) {
                installationId = appInstallation.id.toString();
                console.log(`Found installation for '${app_slug}' with ID: ${installationId}`);
              } else {
                console.log(`'${app_slug}' is not installed on this repository.`);
              }
            } catch (error) {
               console.log(`Could not retrieve app installations for this repository. Error: ${error.message}`);
            }

            core.setOutput('id', installationId);
          result-encoding: string
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post CheckmarxOne metrics to FusionOne
        if: steps.detect-type.outputs.result == 'cxone'
        uses: actions/github-script@v6
        with:
          script: |
            // Step 1: Get authentication token from CheckmarxOne
            console.log('Getting CheckmarxOne authentication token...');
            const tokenUrl = `https://${process.env.CXONE_API_HOST}/auth/realms/${process.env.CXONE_TENANT}/protocol/openid-connect/token`;
            const tokenFormData = new URLSearchParams();
            tokenFormData.append('grant_type', 'refresh_token');
            tokenFormData.append('client_id', 'ast-app');
            tokenFormData.append('refresh_token', process.env.CXONE_API_KEY);

            const tokenResponse = await fetch(tokenUrl, {
              method: 'POST',
              headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
              body: tokenFormData
            });

            if (!tokenResponse.ok) {
              const errorText = await tokenResponse.text();
              core.setFailed(`Failed to get CheckmarxOne token: ${tokenResponse.statusText} - ${errorText}`);
              return;
            }

            const tokenData = await tokenResponse.json();
            const cxToken = tokenData.access_token;
            console.log('Successfully obtained CheckmarxOne authentication token');

            // Step 2: Post metrics to FusionOne using the token
            const metricsEndpoint = "https://fusionone-github-app-840596493445.us-central1.run.app/metrics";
            console.log(`Posting metrics to ${metricsEndpoint}`);

            const response = await fetch(metricsEndpoint, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-Checkmarx-Host': process.env.CXONE_API_HOST,
                'X-Checkmarx-Token': process.env.CXONE_API_KEY,
                'X-Checkmarx-Tenant': process.env.CXONE_TENANT
              },
              body: JSON.stringify({
                repository: `${context.repo.owner}/${context.repo.repo}`,
                owner: context.repo.owner,
                repo: context.repo.repo,
                release: context.payload.release.tag_name,
                installation_id: "${{ steps.get_installation_id.outputs.id }}"
              })
            });

            if (!response.ok) {
              const errorText = await response.text();
              core.setFailed(`Failed to post metrics: ${response.statusText} - ${errorText}`);
            } else {
              console.log('Successfully posted metrics to FusionOne');
              const responseData = await response.json();
              console.log(`Response: ${JSON.stringify(responseData)}`);
            }
        env:
          CXONE_API_HOST: ${{ secrets.CXONE_API_HOST }}
          CXONE_API_KEY: ${{ secrets.CXONE_API_KEY }}
          CXONE_TENANT: ${{ secrets.CXONE_TENANT }}

      - name: Post Checkmarx metrics to FusionOne
        if: steps.detect-type.outputs.result == 'cx'
        uses: actions/github-script@v6
        with:
          script: |
            // Step 1: Get authentication token from Checkmarx
            console.log('Getting Checkmarx authentication token...');
            const tokenUrl = `https://${process.env.CX_API_HOST}/cxrestapi/auth/identity/connect/token`;

            const tokenFormData = new URLSearchParams();
            tokenFormData.append('username', process.env.CX_USER_NAME);
            tokenFormData.append('password', process.env.CX_PASSWORD);
            tokenFormData.append('grant_type', 'password');
            tokenFormData.append('scope', 'sast_rest_api');
            tokenFormData.append('client_id', 'resource_owner_client');
            tokenFormData.append('client_secret', process.env.CX_CLIENT_SECRET || '014DF517-39D1-4453-B7B3-9930C563627C');

            const tokenResponse = await fetch(tokenUrl, {
              method: 'POST',
              headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
              body: tokenFormData
            });

            if (!tokenResponse.ok) {
              const errorText = await tokenResponse.text();
              core.setFailed(`Failed to get Checkmarx token: ${tokenResponse.statusText} - ${errorText}`);
              return;
            }

            const tokenData = await tokenResponse.json();
            const cxToken = tokenData.access_token;
            console.log('Successfully obtained Checkmarx authentication token');

            // Step 2: Post metrics to FusionOne using the token
            const metricsEndpoint = "https://fusionone-github-app-840596493445.us-central1.run.app/metrics";
            console.log(`Posting metrics to ${metricsEndpoint}`);

            const response = await fetch(metricsEndpoint, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-Checkmarx-Host': process.env.CX_API_HOST,
                'X-Checkmarx-Token': process.env.CX_PASSWORD
              },
              body: JSON.stringify({
                repository: `${context.repo.owner}/${context.repo.repo}`,
                owner: context.repo.owner,
                repo: context.repo.repo,
                release: context.payload.release.tag_name,
                installation_id: "${{ steps.get_installation_id.outputs.id }}"
              })
            });

            if (!response.ok) {
              const errorText = await response.text();
              core.setFailed(`Failed to post metrics: ${response.statusText} - ${errorText}`);
            } else {
              console.log('Successfully posted metrics to FusionOne');
              const responseData = await response.json();
              console.log(`Response: ${JSON.stringify(responseData)}`);
            }
        env:
          CX_API_HOST: ${{ secrets.CX_API_HOST }}
          CX_USER_NAME: ${{ secrets.CX_USER_NAME }}
          CX_PASSWORD: ${{ secrets.CX_PASSWORD }}
          CX_CLIENT_SECRET: ${{ secrets.CX_CLIENT_SECRET }}