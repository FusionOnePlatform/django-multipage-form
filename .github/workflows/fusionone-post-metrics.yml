name: FusionOne Metrics

on:
  release:
    types: [published]

jobs:
  post-metrics:
    runs-on: ubuntu-latest
    steps:
      - name: Post Checkmarx metrics to FusionOne
        uses: actions/github-script@v6
        with:
          script: |
            // Step 1: Get authentication token from Checkmarx
            console.log('Getting Checkmarx authentication token...');
            const tokenUrl = `https://${process.env.CX_API_HOST}/cxrestapi/auth/identity/connect/token`;

            const tokenFormData = new URLSearchParams();
            tokenFormData.append('username', process.env.CX_USER_NAME);
            tokenFormData.append('password', process.env.CX_PASSWORD);
            tokenFormData.append('grant_type', 'password');
            tokenFormData.append('scope', 'sast_rest_api');
            tokenFormData.append('client_id', 'resource_owner_client');
            tokenFormData.append('client_secret', process.env.CX_CLIENT_SECRET || '014DF517-39D1-4453-B7B3-9930C563627C');

            const tokenResponse = await fetch(tokenUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
              },
              body: tokenFormData
            });

            if (!tokenResponse.ok) {
              const errorText = await tokenResponse.text();
              core.setFailed(`Failed to get Checkmarx token: ${tokenResponse.statusText} - ${errorText}`);
              return;
            }

            const tokenData = await tokenResponse.json();
            const cxToken = tokenData.access_token;
            console.log('Successfully obtained Checkmarx authentication token');

            // Step 2: Post metrics to FusionOne using the token
            const metricsEndpoint = `${process.env.FUSIONONE_ENDPOINT}/metrics`;
            console.log(`Posting metrics to ${metricsEndpoint}`);

            const response = await fetch(metricsEndpoint, {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${process.env.FUSIONONE_API_KEY}`,
                'Content-Type': 'application/json',
                'X-Checkmarx-Host': process.env.CX_API_HOST,
                'X-Checkmarx-Token': cxToken
              },
              body: JSON.stringify({
                repository: `${context.repo.owner}/${context.repo.repo}`,
                owner: context.repo.owner,
                repo: context.repo.repo,
                release: context.payload.release.tag_name
              })
            });

            if (!response.ok) {
              const errorText = await response.text();
              core.setFailed(`Failed to post metrics: ${response.statusText} - ${errorText}`);
            } else {
              console.log('Successfully posted metrics to FusionOne');
              const responseData = await response.json();
              console.log(`Response: ${JSON.stringify(responseData)}`);
            }
        env:
          FUSIONONE_ENDPOINT: ${{ secrets.FUSIONONE_ENDPOINT }}
          FUSIONONE_API_KEY: ${{ secrets.FUSIONONE_API_KEY }}
          CX_API_HOST: ${{ secrets.CX_API_HOST }}
          CX_USER_NAME: ${{ secrets.CX_USER_NAME }}
          CX_PASSWORD: ${{ secrets.CX_PASSWORD }}
          CX_CLIENT_SECRET: ${{ secrets.CX_CLIENT_SECRET }}
