name: FusionOne Metrics

on:
  release:
    types: [published]

jobs:
  post-metrics:
    runs-on: ubuntu-latest
    steps:
      - name: Detect Checkmarx Type
        id: detect-type
        uses: actions/github-script@v6
        with:
          script: |
            const hasCxOneSecrets = !!process.env.CXONE_API_HOST && !!process.env.CXONE_API_KEY && !!process.env.CXONE_TENANT;
            const hasCxSecrets = !!process.env.CX_API_HOST && !!process.env.CX_USER_NAME && !!process.env.CX_PASSWORD;
            if (hasCxOneSecrets) { return 'cxone'; }
            if (hasCxSecrets) { return 'cx'; }
            core.setFailed('Missing required Checkmarx credentials');
          result-encoding: string
        env:
          CXONE_API_HOST: ${{ secrets.CXONE_API_HOST }}
          CXONE_API_KEY: ${{ secrets.CXONE_API_KEY }}
          CXONE_TENANT: ${{ secrets.CXONE_TENANT }}
          CX_API_HOST: ${{ secrets.CX_API_HOST }}
          CX_USER_NAME: ${{ secrets.CX_USER_NAME }}
          CX_PASSWORD: ${{ secrets.CX_PASSWORD }}

      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Get FusionOne Platform Installation ID
        id: get_installation_id
        run: |
          INSTALLATION_JSON=$(curl -s -X GET \
            -H "Authorization: Bearer ${{ steps.app-token.outputs.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/installation)
          INSTALLATION_ID=$(echo $INSTALLATION_JSON | jq -r '.id')
          if [[ -z "$INSTALLATION_ID" || "$INSTALLATION_ID" == "null" ]]; then
            echo "::error::Could not find installation ID. Response: $(echo $INSTALLATION_JSON | jq -r '.message')"
            exit 1
          fi
          echo "id=${INSTALLATION_ID}" >> $GITHUB_OUTPUT

      - name: Post CheckmarxOne metrics to FusionOne
        if: steps.detect-type.outputs.result == 'cxone'
        uses: actions/github-script@v6
        with:
          script: |
            const installationId = '${{ steps.get_installation_id.outputs.id }}';
            console.log('Getting CheckmarxOne auth token...');
            const tokenUrl = 'https://' + process.env.CXONE_API_HOST + '/auth/realms/' + process.env.CXONE_TENANT + '/protocol/openid-connect/token';
            const tokenFormData = new URLSearchParams();
            tokenFormData.append('grant_type', 'refresh_token');
            tokenFormData.append('client_id', 'ast-app');
            tokenFormData.append('refresh_token', process.env.CXONE_API_KEY);

            const tokenResponse = await fetch(tokenUrl, { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: tokenFormData });
            if (!tokenResponse.ok) {
              const errorText = await tokenResponse.text();
              core.setFailed('Failed to get CxOne token: ' + tokenResponse.statusText + ' - ' + errorText);
              return;
            }
            const tokenData = await tokenResponse.json();

            console.log('Posting metrics to FusionOne...');
            const metricsEndpoint = "https://fusionone-github-app-840596493445.us-central1.run.app/metrics";
            const response = await fetch(metricsEndpoint, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-Checkmarx-Host': process.env.CXONE_API_HOST,
                'X-Checkmarx-Token': process.env.CXONE_API_KEY,
                'X-Checkmarx-Tenant': process.env.CXONE_TENANT,
                'X-Installation-ID': installationId
              },
              body: JSON.stringify({ repository: `${{context.repo.owner}}/${{context.repo.repo}}`, release: context.payload.release.tag_name, installation_id: installationId })
            });
            if (!response.ok) {
              const errorText = await response.text();
              core.setFailed('Failed to post metrics: ' + response.statusText + ' - ' + errorText);
              return;
            }
            console.log('Successfully posted metrics.');
        env:
          CXONE_API_HOST: ${{ secrets.CXONE_API_HOST }}
          CXONE_API_KEY: ${{ secrets.CXONE_API_KEY }}
          CXONE_TENANT: ${{ secrets.CXONE_TENANT }}

      - name: Post Checkmarx metrics to FusionOne
        if: steps.detect-type.outputs.result == 'cx'
        uses: actions/github-script@v6
        with:
          script: |
            const installationId = '${{ steps.get_installation_id.outputs.id }}';
            console.log('Getting Checkmarx auth token...');
            const tokenUrl = 'https://' + process.env.CX_API_HOST + '/cxrestapi/auth/identity/connect/token';
            const tokenFormData = new URLSearchParams();
            tokenFormData.append('username', process.env.CX_USER_NAME);
            tokenFormData.append('password', process.env.CX_PASSWORD);
            tokenFormData.append('grant_type', 'password');
            tokenFormData.append('scope', 'sast_rest_api');
            tokenFormData.append('client_id', 'resource_owner_client');
            tokenFormData.append('client_secret', process.env.CX_CLIENT_SECRET || '014DF517-39D1-4453-B7B3-9930C563627C');

            const tokenResponse = await fetch(tokenUrl, { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: tokenFormData });
            if (!tokenResponse.ok) {
              const errorText = await tokenResponse.text();
              core.setFailed('Failed to get Checkmarx token: ' + tokenResponse.statusText + ' - ' + errorText);
              return;
            }
            const tokenData = await tokenResponse.json();

            console.log('Posting metrics to FusionOne...');
            const metricsEndpoint = "https://fusionone-github-app-840596493445.us-central1.run.app/metrics";
            const response = await fetch(metricsEndpoint, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-Checkmarx-Host': process.env.CX_API_HOST,
                'X-Checkmarx-Token': tokenData.access_token,
                'X-Installation-ID': installationId
              },
              body: JSON.stringify({ repository: `${{context.repo.owner}}/${{context.repo.repo}}`, release: context.payload.release.tag_name, installation_id: installationId })
            });
            if (!response.ok) {
              const errorText = await response.text();
              core.setFailed('Failed to post metrics: ' + response.statusText + ' - ' + errorText);
              return;
            }
            console.log('Successfully posted metrics.');
        env:
          CX_USER_NAME: ${{ secrets.CX_USER_NAME }}
          CX_PASSWORD: ${{ secrets.CX_PASSWORD }}
          CX_CLIENT_SECRET: ${{ secrets.CX_CLIENT_SECRET }}
          CX_API_HOST: ${{ secrets.CX_API_HOST }}

